---

- name: Process facts and set default env
  set_fact:
    processed_volumes: '{{ volumes | operator_storage(meta.namespace) }}'
    has_route: "{{ ('route.openshift.io' in lookup('k8s', cluster_info='api_groups')) | bool }}"
    minecraft_env:
    - name: EULA
      value: '{{ "True" if eula_accepted else "False" | string }}'
    - name: MOTD
      value: '{{ server.motd | default("A Minecraft Server managed by Kubernetes") }}'
    - name: OVERRIDE_SERVER_PROPERTIES
      value: "True"

- name: Create required resources for storage
  k8s:
    namespace: '{{ meta.namespace }}'
    definition: '{{ item }}'
  with_items: '{{ processed_volumes.definitions }}'

- name: Build minecraft envvars
  set_fact:
    minecraft_env: '{{ minecraft_env + [{
      "name": (item.key | upper),
      "value": (item.value if item.value not in [True, False] else "True" if item.value else "False" )|string
    }] }}'
  with_dict: '{{ server | combine(world) | combine(mods) | combine(jvm) }}'

- name: Output computed env block
  debug:
    var: minecraft_env

- name: Retrieve Deployment if it already exists
  k8s_facts:
    api_version: apps/v1
    kind: Deployment
    namespace: '{{ meta.namespace }}'
    name: '{{ deployment_name }}'
  register: minecraft_deployment

- name: Retrieve Service if it already exists
  k8s_facts:
    api_version: v1
    kind: Service
    namespace: '{{ meta.namespace }}'
    name: '{{ service_name }}'
  register: minecraft_service

- name: Create Deployment
  k8s:
    namespace: '{{ meta.namespace }}'
    definition: '{{ lookup("template", "deployment.yaml.j2") | from_yaml }}'
    merge_type: merge
  vars:
    volume_specs: '{{ processed_volumes.volumes }}'
    volume_mounts: '{{ processed_volumes.volume_mounts }}'


- name: Create Service
  k8s:
    namespace: '{{ meta.namespace }}'
    definition: '{{ lookup("template", "service.yaml.j2") | from_yaml }}'
  vars:
    # Kubernetes doesn't handle a port open on TCP and UDP idempotently so this prevents false updates
    nodeport_default_dict:
      nodePort: ""
    port_defaults_dict:
      spec:
        ports: []
    existing_ports: '{{ (minecraft_service.resources.0 | default(port_defaults_dict)).spec.ports }}'
    minecraft_node_port: '{{ ((existing_ports | selectattr("name", "equalto", "minecraft") | list).0 | default(nodeport_default_dict)).nodePort }}'
    rcon_node_port: '{{ ((existing_ports | selectattr("name", "equalto", "rcon") | list).0 | default(nodeport_default_dict)).nodePort }}'
    query_node_port: '{{ ((existing_ports | selectattr("name", "equalto", "query") | list).0 | default(nodeport_default_dict)).nodePort }}'

- name: Create Route
  k8s:
    namespace: '{{ meta.namespace }}'
    definition: '{{ lookup("template", "route.yaml.j2") | from_yaml }}'
  when: has_route

- include_tasks: status.yml
  when: _demos_fabianism_us_minecraft is defined
